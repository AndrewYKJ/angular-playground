import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { finalize } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class NgxHttpLoaderInterceptor {
    constructor() {
        this.reqStatus$ = new ReplaySubject(1);
        this.pendingReqCnt = 0;
        this.forceStop = false;
        this.filterUrls = [];
        this.filterUrlPatterns = [];
        this.filterMethods = [];
        this.filterHeaders = [];
    }
    get pendingRequestCnt() {
        return this.pendingRequestCnt;
    }
    get reqStatus() {
        return this.reqStatus$.asObservable();
    }
    set setFilterUrls(urls) {
        this.filterUrls = urls;
    }
    set setUrlPatterns(regx) {
        this.filterUrlPatterns = regx;
    }
    set setFilterMethods(methods) {
        this.filterMethods = methods;
    }
    set setFilterHeaders(headers) {
        this.filterHeaders = headers;
    }
    set setForceStopReq(bool) {
        this.forceStop = bool;
    }
    checkIsFilterUrl(url) {
        return this.filterUrls.some(x => x === url);
    }
    checkUrlPatterns(url) {
        return this.filterUrlPatterns.some(x => x.test(url));
    }
    checkHttpMethod(req) {
        return this.filterMethods.some(e => {
            return e.toLowerCase() === req.method.toLowerCase();
        });
    }
    checkReqHeader(req) {
        return this.filterHeaders.some(e => {
            return req.headers.has(e);
        });
    }
    isStopReq(r) {
        return this.forceStop
            || this.checkIsFilterUrl(r.urlWithParams)
            || this.checkUrlPatterns(r.urlWithParams)
            || this.checkHttpMethod(r)
            || this.checkReqHeader(r);
    }
    intercept(request, next) {
        const isNext = this.isStopReq(request);
        if (!isNext) {
            this.pendingReqCnt++;
            if (1 === this.pendingReqCnt) {
                this.reqStatus$.next(true);
            }
        }
        return next.handle(request).pipe(finalize(() => {
            if (!isNext) {
                this.pendingReqCnt--;
                if (0 === this.pendingReqCnt) {
                    this.reqStatus$.next(false);
                }
            }
        }));
    }
}
NgxHttpLoaderInterceptor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: NgxHttpLoaderInterceptor, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NgxHttpLoaderInterceptor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: NgxHttpLoaderInterceptor, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: NgxHttpLoaderInterceptor, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
export const RequestsInterceptorProvider = [{
        provide: HTTP_INTERCEPTORS,
        useExisting: NgxHttpLoaderInterceptor,
        multi: true
    }];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWxvYWRlci1pbnRlcmNlcHRvci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWh0dHAtbG9hZGVyL3NyYy9saWIvbmd4LWxvYWRlci1pbnRlcmNlcHRvci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBd0QsTUFBTSxzQkFBc0IsQ0FBQztBQUMvRyxPQUFPLEVBQW9CLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQWMsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLMUMsTUFBTSxPQUFPLHdCQUF3QjtJQUhyQztRQUtZLGVBQVUsR0FBRyxJQUFJLGFBQWEsQ0FBVSxDQUFDLENBQUMsQ0FBQztRQUMzQyxrQkFBYSxHQUFXLENBQUMsQ0FBQztRQUMxQixjQUFTLEdBQVksS0FBSyxDQUFDO1FBQzNCLGVBQVUsR0FBYSxFQUFFLENBQUM7UUFDMUIsc0JBQWlCLEdBQWEsRUFBRSxDQUFDO1FBQ2pDLGtCQUFhLEdBQWEsRUFBRSxDQUFDO1FBQzdCLGtCQUFhLEdBQWEsRUFBRSxDQUFDO0tBaUZ4QztJQS9FRyxJQUFJLGlCQUFpQjtRQUNqQixPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztJQUNsQyxDQUFDO0lBRUQsSUFBSSxTQUFTO1FBQ1QsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzFDLENBQUM7SUFFRCxJQUFJLGFBQWEsQ0FBQyxJQUFjO1FBQzVCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0lBQzNCLENBQUM7SUFFRCxJQUFJLGNBQWMsQ0FBQyxJQUFjO1FBQzdCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUM7SUFDbEMsQ0FBQztJQUVELElBQUksZ0JBQWdCLENB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IHsgSFRUUF9JTlRFUkNFUFRPUlMsIEh0dHBFdmVudCwgSHR0cEhhbmRsZXIsIEh0dHBJbnRlcmNlcHRvciwgSHR0cFJlcXVlc3QgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IEV4aXN0aW5nUHJvdmlkZXIsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgUmVwbGF5U3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBmaW5hbGl6ZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICAgIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd4SHR0cExvYWRlckludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcclxuXHJcbiAgICBwcml2YXRlIHJlcVN0YXR1cyQgPSBuZXcgUmVwbGF5U3ViamVjdDxib29sZWFuPigxKTtcclxuICAgIHByaXZhdGUgcGVuZGluZ1JlcUNudDogbnVtYmVyID0gMDtcclxuICAgIHByaXZhdGUgZm9yY2VTdG9wOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIGZpbHRlclVybHM6IHN0cmluZ1tdID0gW107XHJcbiAgICBwcml2YXRlIGZpbHRlclVybFBhdHRlcm5zOiBSZWdFeHBbXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBmaWx0ZXJNZXRob2RzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBmaWx0ZXJIZWFkZXJzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgIGdldCBwZW5kaW5nUmVxdWVzdENudCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBlbmRpbmdSZXF1ZXN0Q250O1xyXG4gICAgfVxyXG5cclxuICAgIGdldCByZXFTdGF0dXMoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxU3RhdHVzJC5hc09ic2VydmFibGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgc2V0RmlsdGVyVXJscyh1cmxzOiBzdHJpbmdbXSkge1xyXG4gICAgICAgIHRoaXMuZmlsdGVyVXJscyA9IHVybHM7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHNldFVybFBhdHRlcm5zKHJlZ3g6IFJlZ0V4cFtdKSB7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJVcmxQYXR0ZXJucyA9IHJlZ3g7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHNldEZpbHRlck1ldGhvZHMobWV0aG9kczogc3RyaW5nW10pIHtcclxuICAgICAgICB0aGlzLmZpbHRlck1ldGhvZHMgPSBtZXRob2RzO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBzZXRGaWx0ZXJIZWFkZXJzKGhlYWRlcnM6IHN0cmluZ1tdKSB7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJIZWFkZXJzID0gaGVhZGVycztcclxuICAgIH1cclxuXHJcbiAgICBzZXQgc2V0Rm9yY2VTdG9wUmVxKGJvb2w6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLmZvcmNlU3RvcCA9IGJvb2w7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjaGVja0lzRmlsdGVyVXJsKHVybDogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyVXJscy5zb21lKHggPT4geCA9PT0gdXJsKVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2hlY2tVcmxQYXR0ZXJucyh1cmw6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZpbHRlclVybFBhdHRlcm5zLnNvbWUoeCA9PiB4LnRlc3QodXJsKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjaGVja0h0dHBNZXRob2QocmVxOiBIdHRwUmVxdWVzdDxhbnk+KTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyTWV0aG9kcy5zb21lKGUgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gZS50b0xvd2VyQ2FzZSgpID09PSByZXEubWV0aG9kLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjaGVja1JlcUhlYWRlcihyZXE6IEh0dHBSZXF1ZXN0PGFueT4pOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXJIZWFkZXJzLnNvbWUoZSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXEuaGVhZGVycy5oYXMoZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpc1N0b3BSZXEocjogSHR0cFJlcXVlc3Q8YW55Pik6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZvcmNlU3RvcFxyXG4gICAgICAgICAgICB8fCB0aGlzLmNoZWNrSXNGaWx0ZXJVcmwoci51cmxXaXRoUGFyYW1zKVxyXG4gICAgICAgICAgICB8fCB0aGlzLmNoZWNrVXJsUGF0dGVybnMoci51cmxXaXRoUGFyYW1zKVxyXG4gICAgICAgICAgICB8fCB0aGlzLmNoZWNrSHR0cE1ldGhvZChyKVxyXG4gICAgICAgICAgICB8fCB0aGlzLmNoZWNrUmVxSGVhZGVyKHIpXHJcbiAgICB9XHJcblxyXG4gICAgaW50ZXJjZXB0KFxyXG4gICAgICAgIHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4sXHJcbiAgICAgICAgbmV4dDogSHR0cEhhbmRsZXIsXHJcbiAgICApOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XHJcbiAgICAgICAgY29uc3QgaXNOZXh0ID0gdGhpcy5pc1N0b3BSZXEocmVxdWVzdCk7XHJcbiAgICAgICAgaWYgKCFpc05leHQpIHtcclxuICAgICAgICAgICAgdGhpcy5wZW5kaW5nUmVxQ250Kys7XHJcblxyXG4gICAgICAgICAgICBpZiAoMSA9PT0gdGhpcy5wZW5kaW5nUmVxQ250KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlcVN0YXR1cyQubmV4dCh0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxdWVzdCkucGlwZShmaW5hbGl6ZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghaXNOZXh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdSZXFDbnQtLTtcclxuICAgICAgICAgICAgICAgIGlmICgwID09PSB0aGlzLnBlbmRpbmdSZXFDbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcVN0YXR1cyQubmV4dChmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcblxyXG5cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFJlcXVlc3RzSW50ZXJjZXB0b3JQcm92aWRlcjogRXhpc3RpbmdQcm92aWRlcltdID0gW3tcclxuICAgIHByb3ZpZGU6IEhUVFBfSU5URVJDRVBUT1JTLFxyXG4gICAgdXNlRXhpc3Rpbmc6IE5neEh0dHBMb2FkZXJJbnRlcmNlcHRvcixcclxuICAgIG11bHRpOiB0cnVlXHJcbn1dO1xyXG4iXX0=