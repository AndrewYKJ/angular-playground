import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./ngx-loader-interceptor.service";
export class NgxHttpLoaderService {
    constructor(reqService) {
        this.reqService = reqService;
        this.showLoader = new ReplaySubject(1);
    }
    get isShowLoader() {
        return this.showLoader.asObservable();
    }
    show() {
        this.reqService.setForceStopReq = true;
        this.showLoader.next(true);
    }
    hide() {
        this.showLoader.next(false);
        this.reqService.setForceStopReq = false;
    }
}
NgxHttpLoaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: NgxHttpLoaderService, deps: [{ token: i1.NgxHttpLoaderInterceptor }], target: i0.ɵɵFactoryTarget.Injectable });
NgxHttpLoaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: NgxHttpLoaderService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: NgxHttpLoaderService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.NgxHttpLoaderInterceptor }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWh0dHAtbG9hZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtaHR0cC1sb2FkZXIvc3JjL2xpYi9uZ3gtaHR0cC1sb2FkZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBYyxhQUFhLEVBQUUsTUFBTSxNQUFNLENBQUM7OztBQU1qRCxNQUFNLE9BQU8sb0JBQW9CO0lBRy9CLFlBQW9CLFVBQW9DO1FBQXBDLGVBQVUsR0FBVixVQUFVLENBQTBCO1FBRmhELGVBQVUsR0FBRyxJQUFJLGFBQWEsQ0FBVSxDQUFDLENBQUMsQ0FBQztJQUVTLENBQUM7SUFFN0QsSUFBSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3hDLENBQUM7SUFFTSxJQUFJO1FBQ1QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFTSxJQUFJO1FBQ1QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO0lBQzFDLENBQUM7O2lIQWpCVSxvQkFBb0I7cUhBQXBCLG9CQUFvQixjQUZuQixNQUFNOzJGQUVQLG9CQUFvQjtrQkFIaEMsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBSZXBsYXlTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOZ3hIdHRwTG9hZGVySW50ZXJjZXB0b3IgfSBmcm9tICcuL25neC1sb2FkZXItaW50ZXJjZXB0b3Iuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5neEh0dHBMb2FkZXJTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBzaG93TG9hZGVyID0gbmV3IFJlcGxheVN1YmplY3Q8Ym9vbGVhbj4oMSk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZXFTZXJ2aWNlOiBOZ3hIdHRwTG9hZGVySW50ZXJjZXB0b3IpIHsgfVxuXG4gIGdldCBpc1Nob3dMb2FkZXIoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuc2hvd0xvYWRlci5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIHB1YmxpYyBzaG93KCk6IHZvaWQge1xuICAgIHRoaXMucmVxU2VydmljZS5zZXRGb3JjZVN0b3BSZXEgPSB0cnVlO1xuICAgIHRoaXMuc2hvd0xvYWRlci5uZXh0KHRydWUpO1xuICB9XG5cbiAgcHVibGljIGhpZGUoKTogdm9pZCB7XG4gICAgdGhpcy5zaG93TG9hZGVyLm5leHQoZmFsc2UpO1xuICAgIHRoaXMucmVxU2VydmljZS5zZXRGb3JjZVN0b3BSZXEgPSBmYWxzZTtcbiAgfVxufVxuIl19