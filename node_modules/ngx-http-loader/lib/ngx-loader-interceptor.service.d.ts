import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';
import { ExistingProvider } from '@angular/core';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare class NgxHttpLoaderInterceptor implements HttpInterceptor {
    private reqStatus$;
    private pendingReqCnt;
    private forceStop;
    private filterUrls;
    private filterUrlPatterns;
    private filterMethods;
    private filterHeaders;
    get pendingRequestCnt(): number;
    get reqStatus(): Observable<boolean>;
    set setFilterUrls(urls: string[]);
    set setUrlPatterns(regx: RegExp[]);
    set setFilterMethods(methods: string[]);
    set setFilterHeaders(headers: string[]);
    set setForceStopReq(bool: boolean);
    private checkIsFilterUrl;
    private checkUrlPatterns;
    private checkHttpMethod;
    private checkReqHeader;
    private isStopReq;
    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxHttpLoaderInterceptor, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<NgxHttpLoaderInterceptor>;
}
export declare const RequestsInterceptorProvider: ExistingProvider[];
