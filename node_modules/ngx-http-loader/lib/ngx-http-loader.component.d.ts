import { OnInit, TemplateRef, SimpleChanges } from '@angular/core';
import { Observable } from 'rxjs';
import { NgxHttpLoaderInterceptor } from './ngx-loader-interceptor.service';
import { NgxHttpLoaderService } from './ngx-http-loader.service';
import { DomSanitizer } from '@angular/platform-browser';
import * as i0 from "@angular/core";
export declare class NgxHttpLoaderComponent implements OnInit {
    private requestService;
    service: NgxHttpLoaderService;
    sanitizer: DomSanitizer;
    customEnumLoader: {
        DEFAULT: string;
        CLOCK: string;
        DUALRING: string;
        ELLIPSIS: string;
        FACEBOOK: string;
        GEAR: string;
        GRID: string;
        HEART: string;
        HOURGLASS: string;
        JELLYBOX: string;
        MULTICIRCLE: string;
        RING: string;
        RIPPLE: string;
        ROLLER: string;
        SPINNER: string;
        THREEBOUNCE: string;
        WATERWAVE: string;
        ROTATINGPLANE: string;
    };
    customTemplate: TemplateRef<any>;
    customLoader: TemplateRef<any>;
    loader: string | null;
    filterUrlRegexPatterns: RegExp[];
    filterUrls: string[];
    filterHttpHeaders: string[];
    filterHttpMethods: string[];
    delay: number;
    extraDelay: number;
    minDuration: number;
    opacity: number;
    backdropBackgroundColor: string;
    iconColor: string;
    title: string;
    titleColor: string;
    titleSize: string;
    subTitle: string;
    subTitleColor: string;
    subTitleSize: string;
    custom: boolean;
    show$: Observable<boolean>;
    private showuntil;
    constructor(requestService: NgxHttpLoaderInterceptor, service: NgxHttpLoaderService, sanitizer: DomSanitizer);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    initAllFilters(): void;
    initShowObservable(): void;
    private updateHideDelay;
    private showUpto;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxHttpLoaderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NgxHttpLoaderComponent, "ngx-http-loader", never, { "customTemplate": "customTemplate"; "customLoader": "customLoader"; "loader": "loader"; "filterUrlRegexPatterns": "filterUrlRegexPatterns"; "filterUrls": "filterUrls"; "filterHttpHeaders": "filterHttpHeaders"; "filterHttpMethods": "filterHttpMethods"; "delay": "delay"; "extraDelay": "extraDelay"; "minDuration": "minDuration"; "opacity": "opacity"; "backdropBackgroundColor": "backdropBackgroundColor"; "iconColor": "iconColor"; "title": "title"; "titleColor": "titleColor"; "titleSize": "titleSize"; "subTitle": "subTitle"; "subTitleColor": "subTitleColor"; "subTitleSize": "subTitleSize"; "custom": "custom"; }, {}, never, never, false, never>;
}
